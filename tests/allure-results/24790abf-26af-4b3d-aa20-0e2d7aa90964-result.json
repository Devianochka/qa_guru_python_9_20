{"name": "test_add_product_with_params", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.product-name')).has text Build your own cheap computer\n\nReason: AssertionError: actual text: 14.1-inch Laptop\nScreenshot: file://C:\\Users\\User\\.selene\\screenshots\\1709131275101\\1709131275101.png\nPageSource: file://C:\\Users\\User\\.selene\\screenshots\\1709131275101\\1709131275101.html", "trace": "fn = <selene.core.conditions.ElementCondition object at 0x00000292FA6022E0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:174: in __call__\n    return self._fn(entity)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x00000292F9A00730>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n        actual = query(entity)\n        if not predicate(actual):\n>           raise AssertionError(f'actual {result}: {actual}')\nE           AssertionError: actual text: 14.1-inch Laptop\n\n..\\venv\\lib\\site-packages\\selene\\core\\condition.py:146: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nopen_browser = <selene.core.entity.Browser object at 0x00000292F9981880>\n\n    def test_add_product_with_params(open_browser):\n        response = send_post_request(\"login\", data={\"Email\": LOGIN, \"Password\": PASSWORD}, allow_redirects=False)\n        cookies = response.cookies.get(\"NOPCOMMERCE.AUTH\")\n        browser.driver.add_cookie({\"name\": \"NOPCOMMERCE.AUTH\", \"value\": cookies})\n        response2 = send_post_request(\"addproducttocart/details/72/1\", data={\n            \"product_attribute_72_5_18\": 53,\n            \"product_attribute_72_6_19\": 54,\n            \"product_attribute_72_3_20\": 57,\n            \"product_attribute_72_8_30\": 93,\n            \"addtocart_72.EnteredQuantity\": 1}, allow_redirects=False, cookies={\"NOPCOMMERCE.AUTH\": cookies})\n        assert response2.status_code == 200\n        browser.open(BASE_URL)\n        browser.open(f\"{BASE_URL}cart\")\n>       browser.element('.product-name').should(have.text(\"Build your own cheap computer\"))\n\ntest_demoshop_ui.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\selene\\core\\entity.py:136: in should\n    self.wait.for_(condition)\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.ElementCondition object at 0x00000292FA6022E0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.product-name')).has text Build your own cheap computer\nE                   \nE                   Reason: AssertionError: actual text: 14.1-inch Laptop\nE                   Screenshot: file://C:\\Users\\User\\.selene\\screenshots\\1709131275101\\1709131275101.png\nE                   PageSource: file://C:\\Users\\User\\.selene\\screenshots\\1709131275101\\1709131275101.html\n\n..\\venv\\lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "POST https://demowebshop.tricentis.com/login", "status": "passed", "attachments": [{"name": "curl", "source": "11928f3c-da89-4ba7-9ae8-4f96cb45135a-attachment.txt", "type": "text/plain"}], "start": 1709131284049, "stop": 1709131285579}, {"name": "POST https://demowebshop.tricentis.com/addproducttocart/details/72/1", "status": "passed", "attachments": [{"name": "curl", "source": "74a87aba-89cf-498b-8032-63c1d09ab987-attachment.txt", "type": "text/plain"}], "start": 1709131285595, "stop": 1709131286841}], "attachments": [{"name": "log", "source": "4ce95bc9-aabc-479c-9934-4771e41fba00-attachment.txt", "type": "text/plain"}], "start": 1709131284049, "stop": 1709131293009, "uuid": "52434585-e163-491d-813c-6d4c358384e0", "historyId": "54695ce0a4698ae223ebdb5d7ede1564", "testCaseId": "54695ce0a4698ae223ebdb5d7ede1564", "fullName": "tests.test_demoshop_ui#test_add_product_with_params", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_demoshop_ui"}, {"name": "host", "value": "DESKTOP-0NVJHJ6"}, {"name": "thread", "value": "35540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_demoshop_ui"}]}